<!DOCTYPE html>
<html>
    <head>
        <title>LabMate - Laboratories</title>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <link rel="stylesheet" href="/css/pop-up.css">
        <link rel="stylesheet" href="/css/theme-style.css">
        <link rel="stylesheet" href="/css/navbar-style.css">
        <link rel="stylesheet" href="/css/student-laboratories.css">
        
        <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
        <script src="/js/seat-manager.js"></script>

        <script>
            let isLoggedIn = false;
            $(document).ready(function() {
                const userId = localStorage.getItem('userId');
                if (userId) {
                    isLoggedIn = true;
                    document.getElementById('anonymous-option').style.display = 'flex';
                } else {
                    console.error('No user ID found in localStorage');
                }
                $.getScript("/js/navbar.js");
            });
        </script>
        
        <style>
            /* Seat styles */
            .clickable-seat {
                background-color: #D9D9D9;
                color: white;
                border: none;
                padding: 10px;
                text-align: center;
                text-decoration: none;
                display: inline-block;
                font-size: 16px;
                margin: 4px 2px;
                cursor: pointer;
                border-radius: 5px;
            }
            
            .taken-seat {
                background-color: #FF7878;
                color: white;
                border: none;
                padding: 10px;
                text-align: center;
                text-decoration: none;
                display: inline-block;
                font-size: 16px;
                margin: 4px 2px;
                cursor: pointer;
                border-radius: 5px;
            }
            
            .selected-seat {
                background-color: #FC9D45;
                color: white;
                border: none;
                padding: 10px;
                text-align: center;
                text-decoration: none;
                display: inline-block;
                font-size: 16px;
                margin: 4px 2px;
                cursor: pointer;
                border-radius: 5px;
            }
            
            .my-booking-seat {
                height: 50px;
    width: 50px;
                background-color: #23c686;
                color: white;
                border: none;
                padding: 10px;
                text-align: center;
                text-decoration: none;
                display: inline-block;
                font-size: 16px;
                margin: 4px 2px;
                cursor: not-allowed;
                border-radius: 5px;
            }

            #view-button{
                width: 150px;
                background-color: var(--secondary-color);
                color: var(--background-color);
                font-family: var(--primary-font-fam);
                font-size: 13px;
                font-weight: 500;
                border: none;
                border-radius: 10px;
                padding: 10px;
                cursor: pointer;
                transition: all 0.3s ease;
                margin-top: 50px;
                margin-bottom: 10px;
            }

            #view-button:hover{
                transform: scale(1.05);
            }

        </style>
    </head>

    <body>
        <div data-include="navbar-signedin"></div>

        <div class="frame">
            <span class="header">Reserve a Slot</span>

            {{#if success}}
            <div style="background-color: #23c686; color: white; padding: 10px; border-radius: 5px; margin-bottom: 20px; text-align: center;">
                Your reservation has been successfully created!
            </div>
            {{/if}}

            <div class="dropdown">
                <span class="dropdown-header">Laboratory</span>
                <select name = "labs" id = "labs">
                    <option value = "" disabled selected>Select a Laboratory</option>
                    {{#each labs}}
                        <option value="{{this._id}}" data-capacity = {{this.capacity}}>{{this.laboratoryName}}</option>
                    {{/each}}
                </select>
            </div>

            <div class="dropdown">
                <span class="dropdown-header">Date</span>
                <select name="dates" id="dates">
                    <option value="" disabled selected>Select a Date</option>
                </select>
            </div>

            <button id = "view-button">View Slots</button>

            <div id="chart">
                <span id="chart-header">Slot Availability</span>
                <div id="chart-body">
                    <table id="slot-chart">
                        <thead>
                            <tr>
                                
                            </tr>
                        </thead>
                        <tbody id = "timetable">
                            
                        </tbody>
                    </table>
                </div>
            </div>

            <div id="legend">
                <div id="legend-available"></div>
                <span class="legend-text">Available</span>
                <div id="legend-selected"></div>
                <span class="legend-text">Selected</span>
                <div id="legend-unavailable"></div>
                <span class="legend-text">Unavailable</span>
                <div id="legend-booking"></div>
                <span class="legend-text">Your Booking</span>
            </div>

            <div class="dropdown">
                <span class="dropdown-header">Reserve until...</span>
                <select name="endtimes" id="endtimes">
                    <option value="" disabled selected>Select an End Time</option>
                </select>
            </div>

            <div id="anonymous-option" class="checkbox-container" style="display: none;">
                <input type="checkbox" id="anonymous" name="anonymous">
                <label for="anonymous">Book anonymously?</label>
            </div>

            <button id="reserve-button" onclick="openPopup()">Create Booking</button>
        </div>

        <div id="overlay" class="overlay"></div>

        <div class="container">
            <div class="popup" id="confirm-popup">
                <img src="img/reservation.png" class="icon" style="margin-bottom: 15px;"/>
                <p class="message">Would you like to proceed with your reservation?</p>
            
                <div class="btn-wrapper">
                    <button type="cancel" class="btn1" onclick="cancel();">Cancel</button>
                </div>
    
                <div class="btn-wrapper">
                    <button type="confirm" class="btn2" onclick="submitReservation()">Confirm</button>
                </div>
            </div>
        </div>

        <form id="reservationForm" action="/create-reservation" method="POST" style="display: none;">
            <input type="hidden" id="labId" name="labId" value="">
            <input type="hidden" id="date" name="date" value="">
            <input type="hidden" id="seatNumber" name="seatNumber" value="">
            <input type="hidden" id="startTime" name="startTime" value="">
            <input type="hidden" id="endTime" name="endTime" value="">
            <input type="hidden" id="userId" name="userId" value="">
            <input type="hidden" id="isAnonymous" name="isAnonymous" value="">
        </form>

        <!-- View Button -->

        <script>

            function isTimeInRange(time, startTime, endTime) {
                const toMinutes = (t) => {
                    const match = t.match(/(\d+):(\d+)\s+(A\.M\.|P\.M\.)/);
                    if (!match) return 0;
                    
                    let [_, hour, minute, period] = match;
                    hour = parseInt(hour);
                    minute = parseInt(minute);
                    
                    let totalMinutes = hour * 60 + minute;
                    
                    if (period === "P.M." && hour !== 12) totalMinutes += 12 * 60;
                    if (period === "A.M." && hour === 12) totalMinutes = minute;        
                    return totalMinutes;
                };

                const currentTime = toMinutes(time);
                const start = toMinutes(startTime);
                const end = toMinutes(endTime);

                return currentTime >= start && currentTime < end;
            }

            document.getElementById("view-button").addEventListener("click", function()
            {
                const selectedLab = document.getElementById("labs").options[document.getElementById("labs").selectedIndex]

                const selectedDate = document.getElementById("dates").value;
                const capacity = selectedLab.getAttribute("data-capacity");
                const userId = localStorage.getItem('userId');

                console.log("User: ", userId);
                console.log("Image: ", userId.image);
                
                const timeSlots = [
                    "07:30 A.M.", "08:00 A.M.", "08:30 A.M.", "09:00 A.M.",
                    "09:30 A.M.", "10:00 A.M.", "10:30 A.M.", "11:00 A.M.",
                    "11:30 A.M.", "12:00 P.M.", "12:30 P.M.", "01:00 P.M.",
                    "01:30 P.M.", "02:00 P.M.", "02:30 P.M.", "03:00 P.M.",
                    "03:30 P.M.", "04:00 P.M.", "04:30 P.M.", "05:00 P.M.",
                    "05:30 P.M.", "06:00 P.M.", "06:30 P.M.", "07:00 P.M.",
                    "07:30 P.M.", "08:00 P.M.", "08:30 P.M."
                ];

                const timetable = document.getElementById("timetable");

                if(!capacity || !selectedDate) {
                    timetable.innerHTML = "";
                    return;
                }
                
                const today = new Date().toISOString().split('T')[0];
                const isToday = selectedDate === today;

                let availableTimeSlots = [...timeSlots];
                
                if(isToday) {
                    const now = new Date();
                    const currentHour = now.getHours();
                    const currentMinute = now.getMinutes();

                    availableTimeSlots = timeSlots.filter(timeSlot => {
                        const match = timeSlot.match(/(\d+):(\d+)\s+(A\.M\.|P\.M\.)/);
                        if (!match) return false;
                        
                        let [_, hourStr, minuteStr, period] = match;
                        let hour = parseInt(hourStr);
                        const minute = parseInt(minuteStr);
            
                        if (period === "P.M." && hour !== 12) hour += 12;
                        if (period === "A.M." && hour === 12) hour = 0;

                        return (hour > currentHour) || (hour === currentHour && minute > currentMinute);
                    });

                    if(availableTimeSlots.length === 0) {
                        timetable.innerHTML = "<tr><td colspan='100%' style='text-align: center; padding: 20px;'>No available time slots for today. Please select another date.</td></tr>";
                        return;
                    }
                }

                let reservations = [];

                fetch(`/api/reservations/lab/${selectedLab.value}/date/${selectedDate}`)
                    .then(response => response.json())
                    .then(data => {
                        const reservations = data.reservations || [];

                        createReservationPopups(reservations);

                        let timetableHTML = "";
                
                        timetableHTML += `<th id = "seat-header">Seat</th>`;
                        
                        const displayTimeSlots = isToday ? availableTimeSlots : timeSlots;

                        displayTimeSlots.forEach((time) => {
                            timetableHTML +=
                                `<div id = "time-header">
                                    <th>${time}</th>
                                </div>`                    
                        });

                        for (let seat = 1; seat <= capacity; seat++) {
                            timetableHTML += `<tr><td>Seat ${seat}</td>`;
                            displayTimeSlots.forEach((time, index) => {
                                const matchingReservation = reservations.find(
                                reservation => reservation.seatNumber === seat && isTimeInRange(time, reservation.startTime, reservation.endTime)
                                );

                                let seatClass = "clickable-seat";
                                let popupId = "";

                                if(matchingReservation) {
                                    if(matchingReservation.userId._id.toString() === userId) {
                                        seatClass = "my-booking-seat";
                                    } else {
                                        seatClass = "taken-seat";
                                        
                                        const reservationIndex = reservations.findIndex(reservation => 
                                            reservation._id === matchingReservation._id || 
                                            (reservation.seatNumber === matchingReservation.seatNumber && 
                                            reservation.startTime === matchingReservation.startTime && 
                                            reservation.userId._id === matchingReservation.userId._id)
                                        );

                                        popupId = `popup-frame-${reservationIndex}`;
                                    }
                                }

                                timetableHTML +=
                                    `<td>
                                        <button class = "${seatClass}"
                                            seat-number = "${seat}"
                                            seat-time = "${time}"
                                            data-popup-id = "${popupId}">
                                        </button>
                                    </td>`;
                            });
                            timetableHTML += `</tr>`;
                        }

                        timetable.innerHTML = timetableHTML;

                        document.querySelectorAll(".clickable-seat").forEach(seat => {
                            seat.addEventListener("click", handleSeatClick)
                        });

                        document.querySelectorAll(".taken-seat").forEach(seat => {
                            seat.addEventListener("click", function() {
                                const popupId = seat.getAttribute("data-popup-id");
                                if(popupId) {
                                    togglePopup(popupId);
                                }
                            });
                        });
                    })
                    .catch(error => {
                        console.error("Error fetching reservations: ", error);
                    });
            });

            function generateValidEndTimes(selectedSeat) {
                const seatNumber = selectedSeat.getAttribute("seat-number");
                const seatTime = selectedSeat.getAttribute("seat-time");

                const selectedLab = document.getElementById("labs").value;
                const selectedDate = document.getElementById("dates").value;

                const timeSlots = [
                     "07:30 A.M.", "08:00 A.M.", "08:30 A.M.", "09:00 A.M.",
                    "09:30 A.M.", "10:00 A.M.", "10:30 A.M.", "11:00 A.M.",
                    "11:30 A.M.", "12:00 P.M.", "12:30 P.M.", "01:00 P.M.",
                    "01:30 P.M.", "02:00 P.M.", "02:30 P.M.", "03:00 P.M.",
                    "03:30 P.M.", "04:00 P.M.", "04:30 P.M.", "05:00 P.M.",
                    "05:30 P.M.", "06:00 P.M.", "06:30 P.M.", "07:00 P.M.",
                    "07:30 P.M.", "08:00 P.M.", "08:30 P.M.", "09:00 P.M."
                ];

                const startIndex = timeSlots.indexOf(seatTime);
                
                if(startIndex === -1) {
                    console.error("Invalid start time: ", seatTime);
                    return;
                }

                const endTimesDropdown = document.getElementById("endtimes");
                endTimesDropdown.innerHTML = `<option value="" disabled selected>Select an End Time</option>`;

                // Fetch current reservations from the server
                fetch(`/api/reservations/lab/${selectedLab}/date/${selectedDate}`)
                    .then(response => response.json())
                    .then(data => {
                        let nextReservationIndex = timeSlots.length;
                        
                        if (data.reservations && data.reservations.length > 0) {
                            
                            const seatReservations = data.reservations.filter(res =>
                                res.seatNumber.toString() === seatNumber.toString() &&
                                timeSlots.indexOf(res.startTime) > startIndex
                            );

                            if(seatReservations.length > 0) {
                                const earliestNextReservation = seatReservations.reduce((earliest, current) => {
                                    const earliestIndex = timeSlots.indexOf(earliest.startTime);
                                    const currentIndex = timeSlots.indexOf(current.startTime);
                                    return (currentIndex < earliestIndex) ? current : earliest;
                                });

                            nextReservationIndex = timeSlots.indexOf(earliestNextReservation.startTime);
                            }
                        }

                        for(let i = startIndex + 1; i <= nextReservationIndex; i++) {
                            if(i < timeSlots.length) {
                                const option = document.createElement("option");
                                option.value = timeSlots[i];
                                option.text = timeSlots[i];
                                endTimesDropdown.appendChild(option);
                            }
                        }

                        if(endTimesDropdown.options.length === 1) {
                            const option = document.createElement("option");
                            option.value = "";
                            option.text = "No available end times";
                            option.disabled = true;
                            endTimesDropdown.appendChild(option);
                        }
                    })
                    .catch(error => {
                        console.error('Error fetching reservations:', error);
                });
            }
        
            document.getElementById("endtimes").addEventListener("change", function() {

                const timeSlots = [
                    "07:30 A.M.", "08:00 A.M.", "08:30 A.M.", "09:00 A.M.",
                    "09:30 A.M.", "10:00 A.M.", "10:30 A.M.", "11:00 A.M.",
                    "11:30 A.M.", "12:00 P.M.", "12:30 P.M.", "01:00 P.M.",
                    "01:30 P.M.", "02:00 P.M.", "02:30 P.M.", "03:00 P.M.",
                    "03:30 P.M.", "04:00 P.M.", "04:30 P.M.", "05:00 P.M.",
                    "05:30 P.M.", "06:00 P.M.", "06:30 P.M.", "07:00 P.M.",
                    "07:30 P.M.", "08:00 P.M.", "08:30 P.M.", "09:00 P.M."
                ];

                const selectedEndTime = this.value;
                const selectedSeat = document.querySelector(".selected-seat");
                const selectedStartTime = selectedSeat.getAttribute("seat-time");

                const startIndex = timeSlots.indexOf(selectedStartTime);
                const endIndex = timeSlots.indexOf(selectedEndTime);

                if(startIndex === -1 || endIndex === -1) {
                    console.error("Invalid time range.");
                    return;
                }

                document.querySelectorAll(`[seat-number="${selectedSeat.getAttribute("seat-number")}"]`).forEach(seat => {
                    const seatTime = seat.getAttribute("seat-time");
                    const seatIndex = timeSlots.indexOf(seatTime);

                    if(seatIndex >= startIndex && seatIndex < endIndex)
                    {
                        seat.classList.add("selected-seat");
                    } else {
                        seat.classList.remove("selected-seat");
                    }
                })
            })

            function createReservationPopups(reservations) {
                document.querySelectorAll(".popup2").forEach(popup => {
                    popup.remove();
                });

                const frameContainer = document.querySelector(".frame");
                reservations.forEach((reservation, index) => {
                    const popupDiv = document.createElement("div");
                    popupDiv.className = "popup2";
                    popupDiv.id = `popup-frame-${index}`;
                    
                    const popupBox = document.createElement("div");
                    popupBox.className = "popup-box";
                    
                    const timeSpan = document.createElement("span");
                    timeSpan.className = "popup-header";
                    timeSpan.textContent = `${reservation.startTime} - ${reservation.endTime}`;
                    popupBox.appendChild(timeSpan);
                    
                    if (reservation.isAnonymous) {
                        const nameSpan = document.createElement("span");
                        nameSpan.className = "user-name";
                        nameSpan.textContent = "Anonymous Reservation";
                        popupBox.appendChild(nameSpan);
                    } else {
                        const userImg = document.createElement("img");
                        userImg.className = "user-img";
                        userImg.src = reservation.userId.image;
                        userImg.onclick = function() {
                            window.location.href = `/profile/${reservation.userId._id}`;
                        };
                        popupBox.appendChild(userImg);
                        
                        const nameSpan = document.createElement("span");
                        nameSpan.className = "user-name";
                        nameSpan.textContent = reservation.isCurrentUser ? "Your Reservation" : reservation.userId.firstName + " " + reservation.userId.lastName;
                        popupBox.appendChild(nameSpan);
                    }
                    
                    popupDiv.appendChild(popupBox);
                    frameContainer.appendChild(popupDiv);
                });
            }

            function togglePopup(popupId) {
                document.querySelectorAll(".popup2").forEach(popup => {
                    if(popup.id != popupId) {
                        popup.classList.remove('show');
                    }
                });
                const popup = document.getElementById(popupId);
                popup.classList.toggle('show');
            }
            
            let confirmPopup = document.getElementById("confirm-popup");
            let overlay = document.getElementById("overlay");

            function openPopup(){
                // Check if a seat is selected by looking for the selected-seat class
                const selectedSeat = document.querySelector('.selected-seat');
                if (!selectedSeat) {
                    alert("Please select a seat first!");
                    return;
                }
                
                var endTime = document.getElementById("endtimes").value;
                if (!endTime || endTime === "disabled selected") {
                    alert("Please select an end time!");
                    return;
                }

                confirmPopup.classList.add("open-popup");
                overlay.style.display = "block";
            }

            function submitReservation() {
                const lab = document.getElementById('labs').value;
                const date = document.getElementById('dates').value;
                const endTime = document.getElementById('endtimes').value;
                
                // Get the selected seat
                const selectedSeat = document.querySelector('.selected-seat');
                if (!selectedSeat) {
                    alert("Please select a seat first!");
                    return;
                }
                
                confirmPopup.classList.remove("open-popup");
                
                const seatNumber = selectedSeat.getAttribute('seat-number');
                const startTime = selectedSeat.getAttribute('seat-time');
                const isAnonymous = document.getElementById('anonymous') ? document.getElementById('anonymous').checked : false;

                // Validate that all required fields are selected
                if (!lab || !date || !endTime || !seatNumber || !startTime) {
                    alert("Please select a laboratory, date, end time, and seat before reserving.");
                    hideConfirmPopup();
                    return;
                }

                // Now we query the database to check if the seat is available
                fetch(`/api/reservations/check-availability?lab=${lab}&date=${date}&seatNumber=${seatNumber}&startTime=${startTime}&endTime=${endTime}`)
                    .then(response => response.json())
                    .then(data => {
                        if (data.available) {
                            // Seat is available, proceed with booking
                            document.getElementById("labId").value = lab;
                            document.getElementById("date").value = date;
                            document.getElementById("seatNumber").value = seatNumber;
                            document.getElementById("startTime").value = startTime;
                            document.getElementById("endTime").value = endTime;
                            document.getElementById("userId").value = localStorage.getItem('userId');
                            document.getElementById("isAnonymous").value = isAnonymous;
                            
                            // Submit the form
                            document.getElementById("reservationForm").submit();
                        } else {
                            setTimeout(() => {
                                alert('This seat is no longer available. Please select another seat or time slot.');
                                overlay.style.display = "none";  
                            }, 0);
                        } 
                    })
                    .catch(error => {
                        console.error('Error checking seat availability:', error);
                        alert('Failed to check seat availability. Please try again.');
                    });
            }

            function cancel(){
                hideConfirmPopup();
            }

            // Generate the next 7 days dynamically
            function generateNext7Days() {
                const dateSelect = document.getElementById('dates');
                // Clear existing options except the first one
                while (dateSelect.options.length > 1) {
                    dateSelect.remove(1);
                }
                
                const today = new Date();
                
                for (let i = 0; i < 7; i++) {
                    const date = new Date();
                    date.setDate(today.getDate() + i);
                    
                    const formattedDate = date.toISOString().split('T')[0];
                    const displayDate = date.toLocaleDateString('en-US', {
                        weekday: 'long',
                        month: 'long',
                        day: 'numeric'
                    });
                    
                    const option = document.createElement('option');
                    option.value = formattedDate;
                    option.text = displayDate;
                    dateSelect.appendChild(option);
                }
            }

            // Set up the reserve button click handler
            document.getElementById('reserve-button').onclick = function() {
                const selectedSeat = document.querySelector('.selected-seat');
                if (!selectedSeat) {
                    alert('Please select a seat first!');
                    return;
                }
                
                const endTime = document.getElementById('endtimes').value;
                if (!endTime || endTime === "disabled selected") {
                    alert('Please select an end time!');
                    return;
                }
                
                // Show confirmation popup
                openPopup();
            };

            window.onload = function() {
                generateNext7Days();
                
                // If there's a success parameter in the URL, scroll to the top
                const urlParams = new URLSearchParams(window.location.search);
                if (urlParams.get('success')) {
                    window.scrollTo(0, 0);
                }
            };

            // Function to handle seat click
            function handleSeatClick(event) {

                console.log("Seat clicked!");
                
                const userId = localStorage.getItem('userId');
                if (!userId) {
                    alert('Please sign in to select a seat');
                    return;
                }

                // Remove any previously selected seats
                document.querySelectorAll('.selected-seat').forEach(seat => {
                    seat.classList.remove('selected-seat');
                    seat.classList.add('clickable-seat');
                });

                // Add selected class to clicked seat
                const seat = event.target;
                seat.classList.remove('clickable-seat');
                seat.classList.add('selected-seat');
                
                // Store the selected seat info
                localStorage.setItem('selectedSeatNumber', seat.getAttribute('seat-number'));
                localStorage.setItem('selectedTimeSlot', seat.getAttribute('seat-time'));

                // Update end time options based on selected time slot
                
                generateValidEndTimes(seat);
            }
            
            // Function to update end time options based on selected start time
            function updateEndTimeOptions(startTime) {
                const endTimeSelect = document.getElementById('endtimes');
                const morningTimeSlots = [
                    '7:30 AM', '8:00 AM', '8:30 AM', '9:00 AM', '9:30 AM',
                    '10:00 AM', '10:30 AM', '11:00 AM', '11:30 AM', '12:00 PM'
                ];
                
                // Clear existing options except the first one
                while (endTimeSelect.options.length > 1) {
                    endTimeSelect.remove(1);
                }

                // Find start index and add subsequent time slots
                const startIndex = morningTimeSlots.indexOf(startTime);
                if (startIndex !== -1) {
                    for (let i = startIndex + 1; i < morningTimeSlots.length; i++) {
                        const option = document.createElement('option');
                        option.value = morningTimeSlots[i];
                        option.text = morningTimeSlots[i];
                        endTimeSelect.appendChild(option);
                    }
                }
            }

            // Function to hide the overlay and confirm popup
            function hideConfirmPopup() {
                confirmPopup.classList.remove("open-popup");
                overlay.style.display = "none";            
            }

        </script>
    </body>
</html>
